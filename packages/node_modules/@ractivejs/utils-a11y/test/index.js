/* eslint-env qunit */
import { getViolations } from '@ractivejs/utils-a11y'

QUnit.module('utils-a11y')

// Tests, particularly the violating ones, will most likely trip more than one rule.
// Use array.every and array.some to test the absence/presence of a violation.

QUnit.test('Empty template', assert => {
  const violations = getViolations('')
  assert.strictEqual(violations.length, 0)
})

// Rule #1

QUnit.test('img with alt', assert => {
  const violations = getViolations(`
    <img alt="message">
  `)
  assert.ok(violations.every(v => v.id !== 1))
})

QUnit.test('img without alt', assert => {
  const violations = getViolations(`
    <img>
  `)
  assert.ok(violations.some(v => v.id === 1))
})

// Rule #2

QUnit.test('Interactive elements with aria-label', assert => {
  const violations = getViolations(`
    <a aria-label="My Link"></a>
    <button aria-label="My Button"></button>
    <textarea aria-label="My Text Area"></textarea>
    <input aria-label="My Input">
    <select aria-label="My Select">
      <option aria-label="My Option"></option>
    </select>
  `)
  assert.ok(violations.every(v => v.id !== 2))
})

QUnit.test('Interactive elements with aria-labelledby', assert => {
  const violations = getViolations(`
    <a aria-labelledby="somelabel"></a>
    <button aria-labelledby="somelabel"></button>
    <textarea aria-labelledby="somelabel"></textarea>
    <input aria-labelledby="somelabel">
    <select aria-labelledby="somelabel">
      <option aria-labelledby="somelabel"></option>
    </select>
  `)
  assert.ok(violations.every(v => v.id !== 2))
})

QUnit.test('Interactive elements with text label', assert => {
  const violations = getViolations(`
    <a>My Link</a>
    <button>My Button</button>
  `)
  assert.ok(violations.every(v => v.id !== 2))
})

QUnit.test('Interactive elements without labels', assert => {
  const violations = getViolations(`
    <a></a>
    <button></button>
    <textarea></textarea>
    <input>
    <select>
      <option></option>
    </select>
  `)
  assert.ok(violations.some(v => v.id === 2))
})

// Rule #3

QUnit.test('Anchors with "#" href and role', assert => {
  const violations = getViolations(`
    <a href="#" role="button">Non-link anchor</a>
  `)
  assert.ok(violations.every(v => v.id !== 3))
})

QUnit.test('Anchors with "#" href without role', assert => {
  const violations = getViolations(`
    <a href="#">Non-link anchor</a>
  `)
  assert.ok(violations.some(v => v.id === 3))
})

// Rule #4

QUnit.test('Anchors with tabindex and role', assert => {
  const violations = getViolations(`
    <a tabindex="1" role="button">Non-link anchor</a>
  `)
  assert.ok(violations.every(v => v.id !== 4))
})

QUnit.test('Anchors with tabindex without role', assert => {
  const violations = getViolations(`
    <a  tabindex="1">Non-link anchor</a>
  `)
  assert.ok(violations.some(v => v.id === 4))
})

// Rule #5

QUnit.test('Non-interactive elements with click handlers and role', assert => {
  const violations = getViolations(`
    <span onclick="foo()" role="button">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 5))
})

QUnit.test('Non-interactive elements with Ractive click handlers and role', assert => {
  const violations = getViolations(`
    <span on-click="foo()" role="button">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 5))
})

QUnit.test('Non-interactive elements with click handlers without role', assert => {
  const violations = getViolations(`
    <span onclick="foo()">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 5))
})

QUnit.test('Non-interactive elements with Ractive click handlers without role', assert => {
  const violations = getViolations(`
    <span on-click="foo()">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 5))
})

// Rule #6

QUnit.test('Non-interactive elements with click handlers and tabindex', assert => {
  const violations = getViolations(`
    <span onclick="foo()" tabindex="1">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 6))
})

QUnit.test('Non-interactive elements with Ractive click handlers and tabindex', assert => {
  const violations = getViolations(`
    <span on-click="foo()" tabindex="1">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 6))
})

QUnit.test('Non-interactive elements with click handlers without tabindex', assert => {
  const violations = getViolations(`
    <span onclick="foo()">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 6))
})

QUnit.test('Non-interactive elements with Ractive click handlers without tabindex', assert => {
  const violations = getViolations(`
    <span on-click="foo()">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 6))
})

// Rule #7

QUnit.test('numeric tabindex', assert => {
  const violations = getViolations(`
    <span tabindex="1">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 7))
})

QUnit.test('numeric tabindex', assert => {
  const violations = getViolations(`
    <span tabindex="foo">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 7))
})

// Rule #8

QUnit.test('Elements with role="button" and keydown', assert => {
  const violations = getViolations(`
    <span role="button" onkeydown="foo()">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 8))
})

QUnit.test('Elements with role="button" and Ractive keydown', assert => {
  const violations = getViolations(`
    <span role="button" on-keydown="foo()">Button</span>
  `)
  assert.ok(violations.every(v => v.id !== 8))
})

QUnit.test('Elements with role="button" without keydown', assert => {
  const violations = getViolations(`
    <span role="button">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 8))
})

QUnit.test('Elements with role="button" without Ractive keydown', assert => {
  const violations = getViolations(`
    <span role="button">Button</span>
  `)
  assert.ok(violations.some(v => v.id === 8))
})

// Rule #9

QUnit.test('Interactive elements with aria-hidden="true" and tabindex="-1"', assert => {
  const violations = getViolations(`
    <a aria-hidden="true" tabindex="-1"></a>
    <button aria-hidden="true" tabindex="-1"></button>
    <textarea aria-hidden="true" tabindex="-1"></textarea>
    <input aria-hidden="true" tabindex="-1">
    <select aria-hidden="true" tabindex="-1">
      <option aria-hidden="true" tabindex="-1"></option>
    </select>
  `)
  assert.ok(violations.every(v => v.id !== 9))
})

QUnit.test('Interactive elements with aria-hidden="true" without tabindex="-1"', assert => {
  const violations = getViolations(`
    <a aria-hidden="true"></a>
    <button aria-hidden="true"></button>
    <textarea aria-hidden="true"></textarea>
    <input aria-hidden="true">
    <select aria-hidden="true">
      <option aria-hidden="true"></option>
    </select>
  `)
  assert.ok(violations.some(v => v.id === 9))
})

// Rule #10

QUnit.test('Anchors with href="#"', assert => {
  const violations = getViolations(`
    <a href="#">My Button</a>
  `)
  assert.ok(violations.some(v => v.id === 10))
})
