import { isElement, hasAttribute, hasAttributeValue, isInteractive, hasText, hasEvent, isAttributeNumeric } from './utils'

// ID will be a permanent ID for the rule, will be used as docs reference.
// message should be a short description of the rule.
// filter selects applicable elements.
// assert is the condition to satisfy.
// resources is an array of doc/spec resources the consumer can reference.

export const rules = [
  {
    id: 1,
    message: 'Images must have the alt attribute.',
    filter: node => isElement(node, 'img'),
    assert: node => hasAttribute(node, 'alt'),
    resources: []
  },
  {
    id: 2,
    message: 'Interactive elements must have text content, the aria-label attribute or aria-labelledby attribute.',
    filter: node => isInteractive(node) || (isElement(node, 'a') && !hasAttribute(node, 'href')) || hasAttribute(node, 'role'),
    assert: node => (hasAttribute(node, 'aria-label') || hasAttribute(node, 'aria-labelledby')) || hasText(node),
    resources: []
  },
  {
    id: 3,
    message: 'Anchors with href "#" must have the role attribute.',
    filter: node => isElement(node, 'a') && hasAttributeValue(node, 'href', '#'),
    assert: node => hasAttribute(node, 'role'),
    resources: []
  },
  {
    id: 4,
    message: 'Anchors with tabindex but no href must have the role attribute.',
    filter: node => isElement(node, 'a') && hasAttribute(node, 'tabindex') && !hasAttribute(node, 'href'),
    assert: node => hasAttribute(node, 'role'),
    resources: []
  },
  {
    id: 5,
    message: 'Non-interactive elements with click handlers must have the role attribute.',
    filter: node => !isInteractive(node) && (hasEvent(node, 'click') || hasAttribute(node, 'onclick')),
    assert: node => hasAttribute(node, 'role'),
    resources: []
  },
  {
    id: 6,
    message: 'Non-interactive elements with click handlers must have the tabindex attribute.',
    filter: node => !isInteractive(node) && (hasEvent(node, 'click') || hasAttribute(node, 'onclick')),
    assert: node => hasAttribute(node, 'tabindex'),
    resources: []
  },
  {
    id: 7,
    message: 'tabindex must be numeric.',
    filter: node => hasAttribute(node, 'tabindex'),
    assert: node => isAttributeNumeric(node, 'tabindex'),
    resources: []
  },
  {
    id: 8,
    message: 'Elements with role="button" must have the keydown event.',
    filter: node => hasAttributeValue(node, 'role', 'button'),
    assert: node => hasEvent(node, 'keydown') || hasAttribute(node, 'onkeydown'),
    resources: []
  },
  {
    id: 9,
    message: 'Interactive elements with aria-hidden="true" must have tabindex="-1".',
    filter: node => (isInteractive(node) || (isElement(node, 'a') && !hasAttribute(node, 'href'))) && hasAttributeValue(node, 'aria-hidden', 'true'),
    assert: node => hasAttributeValue(node, 'tabindex', '-1'),
    resources: []
  },
  {
    id: 10,
    message: 'Anchors with href "#" should be converted to buttons',
    filter: node => isElement(node, 'a') && hasAttributeValue(node, 'href', '#'),
    assert: node => false,
    resources: []
  }
  // TODO: aria-labelledby must point to a node. Node must be in component.
]
