import Ractive from '@ractivejs/core'
import { rules } from './rules'

export const getViolations = template => {
  const ast = Ractive.parse(template, { includeLinePositions: true })
  const elements = getElements(ast.t)
  const violations = elements.map(e => {
    const failingElements = rules.filter(r => r.filter(e) && !r.assert(e))
    const violationInfo = failingElements.map(r => {
      const { id, message, resources } = r
      const [line, column, offset] = e.p
      return { id, message, resources, line, column, offset }
    })
    return violationInfo
  })
  const flattenedViolations = violations.reduce((c, v) => [...c, ...v], [])

  return flattenedViolations
}

const getElements = nodes => {
  const elementNodes = nodes.filter(n => n.t === 7)
  return elementNodes.concat(...elementNodes.map(n => getElements(n.f || [])))
}
