import Ractive from '@ractivejs/core'
import serialize from 'serialize-javascript'
import { getSourceMap, offsetMapStart, getInlineSourceMap } from './source-map'

const getComponentsInit = components => `component.exports.components = {${components.map(c => `${c.name}:require('${c.module}')`).join(',')}}`
const getTemplateInit = code => `component.exports.template = ${serialize(Ractive.parse(code))}`
const getStyleInit = code => `component.exports.css = ${serialize(code)}`
const getScriptInit = code => code

const getInit = parts => {
  const sections = []

  if (parts.script) sections.push(getScriptInit(parts.script.code))
  if (parts.components.length) sections.push(getComponentsInit(parts.components))
  if (parts.template) sections.push(getTemplateInit(parts.template.code))
  if (parts.style) sections.push(getStyleInit(parts.style.code))

  return sections
}

const getMap = ({ srcName, destName, script, linesOffset }) => {
  const content = (script && script.code) || ''
  const map = (script && script.map) || getSourceMap({ srcName, destName, content })
  const offset = (script && script.code) ? linesOffset : 0
  return offsetMapStart(map, offset)
}

// The loader chooses what builders it imports, Rollup shakes off the excess.
// That's why they can't be in the same function.

export const toConstructor = ({ srcName, destName, parts, resolver }) => {
  const component = { exports: {} }

  if (parts.script) {
    const code = parts.script.code
    const map = getInlineSourceMap(getMap(srcName, destName, parts.script, 2))
    // eslint-disable-next-line
    const factory = new Function('require', 'exports', 'component', 'Ractive', `${code}\n${map}`)
    factory(resolver, component.exports, component, Ractive)
  }
  if (parts.components.length) component.exports.components = parts.components.reduce((p, c) => { p[c.name] = resolver(c.module); return p }, {})
  if (parts.template) component.exports.template = Ractive.parse(parts.template.code)
  if (parts.style) component.exports.css = parts.style.code

  return Ractive.extend(component.exports)
}

export const toModule = ({ srcName, destName, parts }) => {
  const sections = [
    'var Ractive = require(\'@ractivejs/core\')',
    'var component = {exports:{}}',
    ...getInit(parts),
    'module.exports = Ractive.extend(component.exports)'
  ]

  const code = `${sections.join('\n')}\n`
  const script = parts.script
  const linesOffset = 2
  const map = getMap({ srcName, destName, script, linesOffset })
  return { code, map }
}
