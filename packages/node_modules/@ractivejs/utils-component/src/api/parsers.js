import { getComponentName } from './utils'

const linkPattern = /^<link((?:\s+[-a-z:]+(?:="(?:\\.|[^"])*")?)*)\s*(\/?)>/i
const templatePattern = /^<template((?:\s+[-a-z:]+(?:="(?:\\.|[^"])*")?)*)\s*>([\s\S]*?)<\/template>/i
const stylePattern = /^<style((?:\s+[-a-z:]+(?:="(?:\\.|[^"])*")?)*)\s*>([\s\S]*?)<\/style>/i
const scriptPattern = /^<script((?:\s+[-a-z:]+(?:="(?:\\.|[^"])*")?)*)\s*>([\s\S]*?)<\/script>/i
const whitespacePattern = /^(\s+?)/
const attributePairsPattern = /[-a-z:]+(?:="((?:\\.|[^"])*)")?/g
const attributeComponentsPattern = /([-a-z:]+)(?:="((?:\\.|[^"])*)")?/

const typeByRel = {
  component: 'ractive/component',
  template: 'ractive/template',
  partial: 'ractive/partial',
  script: 'ractive/script',
  style: 'ractive/style'
}

const getAttributes = attributesString => {
  const attributePairs = attributesString.match(attributePairsPattern)
  return attributePairs ? attributePairs.reduce((attributes, attribute) => {
    const match = attribute.match(attributeComponentsPattern)
    if (match) attributes[match[1]] = match[2] === undefined ? '' : match[2]
    return attributes
  }, {}) : {}
}

export const toParts = source => {
  const parts = []

  // eslint-disable-next-line
  while (source) {
    let match

    // eslint-disable-next-line
    if (match = source.match(linkPattern)) {
      const { rel = 'component', type = typeByRel[rel], href, id = getComponentName(href) } = getAttributes(match[1].trim())

      parts.push(id ? { rel, type, href, id } : { rel, type, href })

      // eslint-disable-next-line
    } else if (match = source.match(templatePattern)) {
      const { id } = getAttributes(match[1].trim())
      const rel = id ? 'partial' : 'template'
      const type = typeByRel[rel]
      const content = match[2]

      parts.push(id ? { rel, type, content, id } : { rel, type, content })

      // eslint-disable-next-line
    } else if (match = source.match(stylePattern)) {
      const rel = 'style'
      const type = typeByRel[rel]
      const content = match[2]

      parts.push({ rel, type, content })

      // eslint-disable-next-line
    } else if (match = source.match(scriptPattern)) {
      const { type: userType = typeByRel.component } = getAttributes(match[1].trim())
      const rel = userType === typeByRel.style ? 'style' : 'script'
      const type = typeByRel.script
      const content = match[2]

      parts.push({ rel, type, content })

      // eslint-disable-next-line
    } else if (match = source.match(whitespacePattern)) {
      // Strip whitespace from the top level. Not really important.
    } else {
      throw new Error(`Unexpected syntax at ${source.slice(0, 80)}...`)
    }

    source = source.slice(match[0].length)
  }

  return parts
}
