/* eslint-env browser, qunit */
import { toParts, toModule, toESM } from '@ractivejs/utils-component'

QUnit.module('source-builder')

const cjs = [
  'reference',
  'reordered',
  'script-only',
  'style-only',
  'template-only',
  'links-only',
  'duplicate-link-href',
  'duplicate-link-name',
  'empty-top-levels',
  'script-with-mustache',
  'style-with-mustache',
  'duplicate-require',
  'non-dependency-requires'
]

cjs.forEach((spec, index) => {
  QUnit.test(`${spec} CJS source builder`, assert => {
    const sampleDir = `/base/test/samples/cjs/${spec}`
    const source = fetch(`${sampleDir}/component.ractive.html`).then(r => r.text())
    const expectedParts = fetch(`${sampleDir}/component.parts.json`).then(r => r.json())
    const expectedCode = fetch(`${sampleDir}/component.js`).then(r => r.text())
    const expectedMap = fetch(`${sampleDir}/component.js.map`).then(r => r.json())
    const requests = [source, expectedParts, expectedCode, expectedMap]

    return Promise.all(requests).then(([source, expectedParts, expectedCode, expectedMap]) => {
      const srcName = 'component.ractive.html'
      const destName = 'component.js'
      const parts = toParts(source)
      const actualCJS = toModule({ srcName, destName, parts })

      assert.deepEqual(parts, expectedParts, `${spec} parsed correctly`)
      assert.strictEqual(actualCJS.code, expectedCode, `${spec} toCJS code correctly`)
      assert.deepEqual(actualCJS.map, expectedMap, `${spec} toCJS map correctly`)
    })
  })
})

const esm = [
  'reference'
]

esm.forEach((spec, index) => {
  QUnit.test(`${spec} ESM source builder`, assert => {
    const sampleDir = `/base/test/samples/esm/${spec}`
    const source = fetch(`${sampleDir}/component.ractive.html`).then(r => r.text())
    const expectedParts = fetch(`${sampleDir}/component.parts.json`).then(r => r.json())
    const expectedCode = fetch(`${sampleDir}/component.js`).then(r => r.text())
    const expectedMap = fetch(`${sampleDir}/component.js.map`).then(r => r.json())
    const requests = [source, expectedParts, expectedCode, expectedMap]

    return Promise.all(requests).then(([source, expectedParts, expectedCode, expectedMap]) => {
      const srcName = 'component.ractive.html'
      const destName = 'component.js'
      const parts = toParts(source)
      const actualESM = toESM({ srcName, destName, parts })

      assert.deepEqual(parts, expectedParts, `${spec} parsed correctly`)
      assert.strictEqual(actualESM.code, expectedCode, `${spec} tESM code correctly`)
      // assert.deepEqual(actualCJS.map, expectedMap, `${spec} toESM map correctly`)
    })
  })
})
